#!/bin/bash

# Script para desplegar el contrato CoinFlip en Base Sepolia y actualizar autom√°ticamente
# los archivos del frontend con el ABI y la direcci√≥n del contrato

set -e  # Salir si cualquier comando falla

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuraci√≥n
CHAIN_ID="84532"  # Base Sepolia
NETWORK="base-sepolia"
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONTRACTS_DIR="$PROJECT_ROOT/packages/contracts"

echo -e "${BLUE}üöÄ Iniciando despliegue a Base Sepolia...${NC}"
echo -e "${BLUE}üìÅ Directorio del proyecto: $PROJECT_ROOT${NC}"

# Verificar que estamos en el directorio correcto
if [ ! -d "$CONTRACTS_DIR" ]; then
    echo -e "${RED}‚ùå Error: No se encontr√≥ el directorio de contratos en $CONTRACTS_DIR${NC}"
    exit 1
fi

# Cargar variables de entorno desde archivo .env si existe
ENV_FILE="$CONTRACTS_DIR/.env"
if [ -f "$ENV_FILE" ]; then
    echo -e "${BLUE}üìÑ Cargando variables de entorno desde $ENV_FILE${NC}"
    export $(grep -v '^#' "$ENV_FILE" | xargs)
else
    echo -e "${YELLOW}‚ö†Ô∏è  No se encontr√≥ archivo .env en $CONTRACTS_DIR${NC}"
fi

# Verificar que las variables de entorno necesarias est√©n configuradas
echo -e "${YELLOW}üîç Verificando variables de entorno...${NC}"

if [ -z "$PRIVATE_KEY" ]; then
    echo -e "${RED}‚ùå Error: La variable PRIVATE_KEY no est√° configurada${NC}"
    echo -e "${YELLOW}üí° Opciones para configurar:${NC}"
    echo -e "   1. Crear archivo .env en $CONTRACTS_DIR con: PRIVATE_KEY=tu_clave_privada"
    echo -e "   2. Configurar en terminal: export PRIVATE_KEY=tu_clave_privada"
    exit 1
fi

if [ -z "$BASE_SEPOLIA_URL" ]; then
    echo -e "${RED}‚ùå Error: La variable BASE_SEPOLIA_URL no est√° configurada${NC}"
    echo -e "${YELLOW}üí° Opciones para configurar:${NC}"
    echo -e "   1. Crear archivo .env en $CONTRACTS_DIR con: BASE_SEPOLIA_URL=https://sepolia.base.org"
    echo -e "   2. Configurar en terminal: export BASE_SEPOLIA_URL=tu_url_rpc"
    exit 1
fi

echo -e "${GREEN}‚úÖ Variables de entorno verificadas${NC}"

# Navegar al directorio de contratos
cd "$CONTRACTS_DIR"

# Compilar contratos
echo -e "${YELLOW}üî® Compilando contratos...${NC}"
forge build

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error durante la compilaci√≥n${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Contratos compilados exitosamente${NC}"

# Desplegar contrato
echo -e "${YELLOW}üöÄ Desplegando contrato a Base Sepolia...${NC}"
echo -e "${BLUE}üì° Network: $NETWORK (Chain ID: $CHAIN_ID)${NC}"

# Intentar desplegar con verificaci√≥n
echo -e "${YELLOW}üîç Intentando desplegar con verificaci√≥n...${NC}"
forge script script/FlipToEarnFaucet.s.sol:FlipToEarnFaucetScript \
    --rpc-url "$NETWORK" \
    --broadcast \
    --verify \
    --etherscan-api-key "$ETHERSCAN_API_KEY" \
    -vvvv

DEPLOY_EXIT_CODE=$?

if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Despliegue con verificaci√≥n fall√≥, intentando sin verificaci√≥n...${NC}"
    
    # Intentar desplegar sin verificaci√≥n
    forge script script/FlipToEarnFaucet.s.sol:FlipToEarnFaucetScript \
        --rpc-url "$NETWORK" \
        --broadcast \
        -vvvv
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Error durante el despliegue${NC}"
        exit 1
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Contrato desplegado sin verificaci√≥n${NC}"
        echo -e "${YELLOW}üí° Puedes verificar manualmente m√°s tarde con una API key v√°lida${NC}"
    fi
fi

echo -e "${GREEN}‚úÖ Contrato desplegado exitosamente${NC}"

# Verificar contrato autom√°ticamente si la verificaci√≥n fall√≥ durante el despliegue
if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
    echo -e "${YELLOW}üîÑ Intentando verificaci√≥n autom√°tica...${NC}"
    cd "$PROJECT_ROOT"
    if ./scripts/auto-verify.sh base-sepolia; then
        echo -e "${GREEN}‚úÖ Verificaci√≥n autom√°tica exitosa${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Verificaci√≥n autom√°tica fall√≥, pero el contrato est√° desplegado${NC}"
    fi
    cd "$CONTRACTS_DIR"
fi

# Ejecutar script post-despliegue
echo -e "${YELLOW}üîÑ Actualizando archivos del frontend...${NC}"

cd "$PROJECT_ROOT"
node scripts/post-deploy.js "$CHAIN_ID"

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error durante la actualizaci√≥n de archivos${NC}"
    exit 1
fi

echo -e "${GREEN}üéâ ¬°Despliegue completado exitosamente!${NC}"
echo -e "${BLUE}üìù Resumen del despliegue:${NC}"
echo -e "   ‚Ä¢ Network: Base Sepolia ($CHAIN_ID)"
echo -e "   ‚Ä¢ Contrato: FlipToEarnFaucet"
echo -e "   ‚Ä¢ ABI actualizado en: apps/miniapp/src/contracts/coin-flip.contract.ts"
echo -e "   ‚Ä¢ Direcci√≥n del contrato en: apps/miniapp/.env.local"
echo -e ""
echo -e "${YELLOW}üí° Pr√≥ximos pasos:${NC}"
echo -e "   1. Verifica que la variable NEXT_PUBLIC_FLIP_TO_EARN_FAUCET_CONTRACT_ADDRESS_BASE_SEPOLIA est√© en tu .env.local"
echo -e "   2. Reinicia tu servidor de desarrollo si est√° corriendo"
echo -e "   3. ¬°Tu frontend ya puede interactuar con el contrato desplegado!"
echo -e ""
echo -e "${BLUE}üîó Puedes verificar el contrato en BaseScan:${NC}"
echo -e "   https://sepolia.basescan.org/address/[CONTRACT_ADDRESS]"
